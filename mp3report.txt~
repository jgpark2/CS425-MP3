Jonathan Park, jgpark2

Instructions for how to compile and run code:
 > java -cp CS425-MP3/bin mp3.Main


 * The Optimal Voting Set minimizing K (pseudo hard coded)
 * 
 * Since N = 9, K ~ sqrt(9)=3, where K is the size of a voting set.
 * (Each process should have a voting set of the same size).
 * 
 * Also, M = K ~ 3, where M is the number of voting sets a process belongs to.
 * 
 * To calculate the optimal set, we look at a sqrt(N) x sqrt(N) matrix
 * -------------
 * | 0 | 1 | 2 |
 * -------------
 * | 3 | 4 | 5 |
 * -------------
 * | 6 | 7 | 8 |
 * -------------
 * 
 * As an approximation (~ 2*sqrt(N)) voting set V_i will be the union of the row
 *  and column containing p_i (the processor of id i).
 * So, the 0th processor will have a voting set of: 0,1,2,3,6
 
 Here's a calculation of the vset:
 ArrayList<Integer> vSetInd = new ArrayList<Integer>();
		
		int rN = (int) Math.sqrt(N);
		
		//Add rows
		int rowNum = i/rN;
		for(int j = 0; j<rN; ++j) {
			int value = rowNum*rN + j;
			vSetInd.add(value);
		}
		
		//Add columns
		int colNum = i % rN;
		for(int j = 0; j<rN; ++j) {
			int value = colNum+rN*j;
			if (value == i) //Avoid adding my own index
				continue;
			vSetInd.add(value);
		}
		
	 * -------------
 * | 0 | 1 | 2 |
 * -------------
 * | 3 | 4 | 5 |
 * -------------
 * | 6 | 7 | 8 |
 * -------------	
Full list of final voting sets:
p0={0,1,2,3,6}
p1={0,1,2,4,7}
p2={0,1,2,5,8}
p3={0,3,4,5,6}
p4={1,3,4,5,7}
p5={1,2,3,4,8}
p6={0,3,6,7,8}
p7={1,4,6,7,8}
p8={2,5,6,7,8}

